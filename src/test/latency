#!/bin/sh
#
# This material is based upon work supported by the Defense Advanced
# Research Projects Agency under Contract No. N66001-11-C-4017.
#
# Copyright 2014 - Raytheon BBN Technologies Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.  See the License for the specific language governing
# permissions and limitations under the License.

# In conjunction with "null-latency", this program measures the
# latency of initiating connections (SOCKS or normal) and sending
# a message and getting a response (TtFB - time to first byte) and
# the latency of established connections (RTT - the time to receive
# a response to a short message) with and without Curveball with
# both http and https tunnels.
#
# To set up, start the echo-server listening on $ECHOPORT
# on the $COVERT host, with no filter rules preventing
# connections from this host to $COVERT on $ECHOPORT.
# The echo-server should be run in quiet mode in order to
# keep the overhead of its chatter from skewing the results.
#
# Note: the TtFB measurement is probably higher than it needs
# to be because echo-client has a non-trivial startup cost.
# It would be more accurate to add an option to echo-client to
# open/close multiple connections rather than one per iteraction.

DIRNAME=$(/usr/bin/dirname $(/usr/bin/which "$0"))
SCRIPTDIR=$(/usr/bin/dirname $(/usr/bin/which "$0"))"/../scripts"
EXPNAME=$(/bin/hostname | /bin/sed -e 's/^[^.]*\.//' -e 's/\..*//')

DECOY=decoy

# If we're running in a pico experiment, then there's no covert,
# so use decoy as the target.
#
case ${EXPNAME} in
    cb-pico|cb-pico2)
	echo "Warning: running in a pico experiment."
	echo "Warning: the results may be not be accurate."
	COVERT=decoy
	;;
    *)
	COVERT=covert
	;;
esac

ITERS=1000
ECHOPORT=2300

# By default, on EARS there is an http_proxy set so that things
# like apt-get will work.  We need to disable this before curl
# tries to use it.
#
unset http_proxy

CLIENT=client.py
CLIENTPATH="${SCRIPTDIR}/${CLIENT}"
ECHOCLIENT="${DIRNAME}/echo-client"

SUDO=/usr/bin/sudo
PKILL=/usr/bin/pkill

NC=/bin/nc

CNT=0
STARTTIME=$(/bin/date +"%s.%N")
while [ $CNT -lt $ITERS ]; do
    CNT=$((CNT + 1))
    echo 'hi' | ${ECHOCLIENT} ${COVERT} ${ECHOPORT} > /dev/null
done
ENDTIME=$(/bin/date +"%s.%N")

RTT=$(echo "($ENDTIME - $STARTTIME) / $ITERS" | bc -l)
echo "normal echo TtFB $RTT"

STARTTIME=$(/bin/date +"%s.%N")
echo 'hi' | ${ECHOCLIENT} -n ${ITERS} -q ${COVERT} ${ECHOPORT}
ENDTIME=$(/bin/date +"%s.%N")

RTT=$(echo "($ENDTIME - $STARTTIME) / $ITERS" | bc -l)
echo "normal echo RTT $RTT"

# If there's already a curveball client running, then we don't know
# what parameters it has: kill it and start a new one.
#
${SUDO} ${PKILL} -f ${CLIENT}
${SUDO} ${CLIENTPATH} -x -d "${DECOY}:80" -w 2> /dev/null &
sleep 5

CNT=0
STARTTIME=$(/bin/date +"%s.%N")
while [ $CNT -lt $ITERS ]; do
    CNT=$((CNT + 1))
    echo 'hi' | ${ECHOCLIENT} -x localhost:5010 ${COVERT} ${ECHOPORT} > /dev/null
done
ENDTIME=$(/bin/date +"%s.%N")

RTT=$(echo "($ENDTIME - $STARTTIME) / $ITERS" | bc -l)
echo "curveball-http echo TtFB $RTT"

STARTTIME=$(/bin/date +"%s.%N")
echo 'hi' | ${ECHOCLIENT} -x localhost:5010 -n ${ITERS} -q ${COVERT} ${ECHOPORT}
ENDTIME=$(/bin/date +"%s.%N")

RTT=$(echo "($ENDTIME - $STARTTIME) / $ITERS" | bc -l)
echo "curveball-http echo RTT $RTT"

# Kill the http client and rerun with the https client
#
${SUDO} ${PKILL} -f ${CLIENT}
${SUDO} ${CLIENTPATH} -x -d "${DECOY}:443" 2> /dev/null &
sleep 5

CNT=0
STARTTIME=$(/bin/date +"%s.%N")
while [ $CNT -lt $ITERS ]; do
    CNT=$((CNT + 1))
    echo 'hi' | ${ECHOCLIENT} -x localhost:5010 ${COVERT} ${ECHOPORT} > /dev/null
done
ENDTIME=$(/bin/date +"%s.%N")

RTT=$(echo "($ENDTIME - $STARTTIME) / $ITERS" | bc -l)
echo "curveball-https echo TtFB $RTT"

STARTTIME=$(/bin/date +"%s.%N")
echo 'hi' | ${ECHOCLIENT} -x localhost:5010 -n ${ITERS} -q ${COVERT} ${ECHOPORT}
ENDTIME=$(/bin/date +"%s.%N")

RTT=$(echo "($ENDTIME - $STARTTIME) / $ITERS" | bc -l)
echo "curveball-https echo RTT $RTT"

# Kill the https client and rerun with the httpu client
#
# TODO: fix so that this reliably works.  Right now the messages are
# too small to push through the system!
#
# ${SUDO} ${PKILL} -f ${CLIENT}
# ${SUDO} ${CLIENTPATH} -x -d "${DECOY}:8080" -w -u 2> /dev/null &
# sleep 5
#
# CNT=0
# STARTTIME=$(/bin/date +"%s.%N")
# while [ $CNT -lt $ITERS ]; do
    # CNT=$((CNT + 1))
    # echo 'hi' | ${ECHOCLIENT} -x localhost:5010 ${COVERT} ${ECHOPORT} > /dev/null
# done
# ENDTIME=$(/bin/date +"%s.%N")
#
# RTT=$(echo "($ENDTIME - $STARTTIME) / $ITERS" | bc -l)
# echo "curveball-httpu echo TtFB $RTT"
#
# STARTTIME=$(/bin/date +"%s.%N")
# echo 'hi' | ${ECHOCLIENT} -x localhost:5010 -n ${ITERS} -q ${COVERT} ${ECHOPORT}
# ENDTIME=$(/bin/date +"%s.%N")
#
# RTT=$(echo "($ENDTIME - $STARTTIME) / $ITERS" | bc -l)
# echo "curveball-httpu echo RTT $RTT"

# Clean up any clients we left behind
#
${SUDO} ${PKILL} -f ${CLIENT}
