#!/bin/sh
#
# This material is based upon work supported by the Defense Advanced
# Research Projects Agency under Contract No. N66001-11-C-4017.
#
# Copyright 2014 - Raytheon BBN Technologies Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.  See the License for the specific language governing
# permissions and limitations under the License.

# Tests download throughput with and without Curveball, with different
# tunnel types (currently http and https), using mini-httpd as the
# data source.
#
# Somewhat hardcoded; some parameters can be changed by modifying
# the constants below.
#
# Kills any running Curveball client and starts a new one

SCRIPTDIR=$(/usr/bin/dirname $(/usr/bin/which "$0"))"/../scripts"
EXPNAME=$(/bin/hostname | /bin/sed -e 's/^[^.]*\.//' -e 's/\..*//')

DECOY=decoy

# If we're running in a pico experiment, then there's no covert,
# so use decoy as the target.
#
case ${EXPNAME} in
    cb-pico|cb-pico2)
	echo "Warning: running in a pico experiment."
	echo "Warning: the results may be not be accurate."
	COVERT=decoy
	;;
    *)
	COVERT=covert
	;;
esac

TSIZE=4000000
ITERS=5

CLIENT=client.py
CLIENTPATH="${SCRIPTDIR}/${CLIENT}"

CURL=/usr/bin/curl
SUDO=/usr/bin/sudo
PKILL=/usr/bin/pkill

# By default, on EARS there is an http_proxy set so that things
# like apt-get will work.  We need to disable this before curl
# tries to use it.
#
unset http_proxy

# Get sudo established quickly, instead of making the user
# type a password later
${SUDO} /bin/true

condition="normal http download"
iter=0
while [ $iter -lt $ITERS ]; do
    iter=$((iter + 1))

    $CURL -w "$condition $iter %{speed_download} B/s %{size_download} B\n" \
	    -4 -o /dev/null -s \
	    "http://${COVERT}/?size=$TSIZE"
done

condition="normal https download"
iter=0
while [ $iter -lt $ITERS ]; do
    iter=$((iter + 1))

    $CURL -w "$condition $iter %{speed_download} B/s %{size_download} B\n" \
	    -4 -o /dev/null -s \
	    "https://${COVERT}/?size=$TSIZE"
done

# If there's already a curveball client running, then we don't know
# what parameters it has: kill it and start a new one.
#
${SUDO} ${PKILL} -f ${CLIENT}
${SUDO} ${CLIENTPATH} -x -d "${DECOY}:80" -w 2> /dev/null &
sleep 5

condition="curveball-http http download"
iter=0
while [ $iter -lt $ITERS ]; do
    iter=$((iter + 1))

    $CURL -w "$condition $iter %{speed_download} B/s %{size_download} B\n" \
	    -4 -o /dev/null -s \
	    --socks localhost:5010 \
	    "http://$COVERT/?size=$TSIZE"
done

condition="curveball-http https download"
iter=0
while [ $iter -lt $ITERS ]; do
    iter=$((iter + 1))

    $CURL -w "$condition $iter %{speed_download} B/s %{size_download} B\n" \
	    -4 -o /dev/null -s \
	    --socks localhost:5010\
	    "https://$COVERT/?size=$TSIZE"
done

# Kill the http client and rerun with the https client
#
${SUDO} ${PKILL} -f ${CLIENT}
${SUDO} ${CLIENTPATH} -x -d "${DECOY}:443" 2> /dev/null &
sleep 5

condition="curveball-https http download"
iter=0
while [ $iter -lt $ITERS ]; do
    iter=$((iter + 1))

    $CURL -w "$condition $iter %{speed_download} B/s %{size_download} B\n" \
	    -4 -o /dev/null -s \
	    --socks localhost:5010 \
	    "http://$COVERT/?size=$TSIZE"
done

condition="curveball-https https download"
iter=0
while [ $iter -lt $ITERS ]; do
    iter=$((iter + 1))

    $CURL -w "$condition $iter %{speed_download} B/s %{size_download} B\n" \
	    -4 -o /dev/null -s \
	    --socks localhost:5010\
	    "https://$COVERT/?size=$TSIZE"
done

# Kill the https client and rerun with the http-uni client
#

# TODO: use the same TSIZE for http-uni.
# The http-uni client is much slower than the others, so cut the
# transfer size so we don't have to wait forever.

TSIZE=$((TSIZE / 40))

${SUDO} ${PKILL} -f ${CLIENT}
${SUDO} ${CLIENTPATH} -x -d "${DECOY}:80" -w -u 2> /dev/null &
sleep 5

condition="curveball-httpu http download"
iter=0
while [ $iter -lt $ITERS ]; do
    iter=$((iter + 1))

    $CURL -w "$condition $iter %{speed_download} B/s %{size_download} B\n" \
	    -4 -o /dev/null -s \
	    --socks localhost:5010 \
	    "http://$COVERT/?size=$TSIZE"
    # The unidirectional tunnel works better if there is a small gap
    # between large requests.
    sleep 4
done

condition="curveball-httpu https download"
iter=0
while [ $iter -lt $ITERS ]; do
    iter=$((iter + 1))

    $CURL -w "$condition $iter %{speed_download} B/s %{size_download} B\n" \
	    -4 -o /dev/null -s \
	    --socks localhost:5010\
	    "https://$COVERT/?size=$TSIZE"
    # The unidirectional tunnel works better if there is a small gap
    # between large requests.
    sleep 4
done

# Kill the httpu client and rerun with the httpsu client
#
${SUDO} ${PKILL} -f ${CLIENT}
${SUDO} ${CLIENTPATH} -x -d "${DECOY}:443" -u 2> /dev/null &
sleep 5

condition="curveball-httpsu http download"
iter=0
while [ $iter -lt $ITERS ]; do
    iter=$((iter + 1))

    $CURL -w "$condition $iter %{speed_download} B/s %{size_download} B\n" \
	    -4 -o /dev/null -s \
	    --socks localhost:5010 \
	    "http://$COVERT/?size=$TSIZE"
done

condition="curveball-httpsu https download"
iter=0
while [ $iter -lt $ITERS ]; do
    iter=$((iter + 1))

    $CURL -w "$condition $iter %{speed_download} B/s %{size_download} B\n" \
	    -4 -o /dev/null -s \
	    --socks localhost:5010\
	    "https://$COVERT/?size=$TSIZE"
done



# Clean up any clients we left behind
#
${SUDO} ${PKILL} -f ${CLIENT}
