node n1 {
    type router
    model host
    network-config {
	hostname client
	!
	interface eth1
	 ipv6 address 2001:4::10/64
	 ip address 192.168.56.4/24
	!
	interface eth0
	 ip address 10.0.0.10/24
	 ipv6 address 2001:0::10/64
	!
    }
    canvas c1
    iconcoords {87.2338850215948 115.07203804663897}
    labelcoords {87.2338850215948 147.07203804663897}
    interface-peer {eth0 n2}
    interface-peer {eth1 n4}
    custom-image figs/client.gif
    custom-config {
	custom-config-id service:Firewall:firewall.sh
	custom-command firewall.sh
	config {
	#!/bin/sh
	# custom node firewall rules for service (security.py)
	# -------- CUSTOMIZATION REQUIRED --------
	#
	# Below are sample iptables firewall rules that you can uncomment and edit.
	# You can also use ip6tables rules for IPv6.
	#
	iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
	
	# start by flushing all firewall rules (so this script may be re-run)
	#iptables -F
	
	# allow traffic related to established connections
	#iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	
	# allow TCP packets from any source destined for 192.168.1.1
	#iptables -A INPUT -s 0/0 -i eth0 -d 192.168.1.1  -p TCP -j ACCEPT
	
	# allow OpenVPN server traffic from eth0
	#iptables -A INPUT -p udp --dport 1194 -j ACCEPT
	#iptables -A INPUT -i eth0 -j DROP
	#iptables -A OUTPUT -p udp --sport 1194 -j ACCEPT
	#iptables -A OUTPUT -o eth0 -j DROP
	
	# allow ICMP ping traffic
	#iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
	#iptables -A INPUT  -p icmp --icmp-type echo-reply   -j ACCEPT
	
	# allow SSH traffic
	#iptables -A -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
	
	# drop all other traffic coming in eth0
	#iptables -A INPUT -i eth0 -j DROP
	
	}
    }
    custom-config {
	custom-config-id service:Firewall
	custom-command Firewall
	config {
	
	('firewall.sh', )
	20
	('sh firewall.sh', )
	
	
	
	}
    }
    services {IPForward DefaultRoute SSH Firewall}
}

node n2 {
    type router
    model router
    network-config {
	hostname filter
	!
	interface eth1
	 ip address 10.0.1.1/24
	 ipv6 address 2001:1::1/64
	!
	interface eth0
	 ip address 10.0.0.1/24
	 ipv6 address 2001:0::1/64
	!
    }
    canvas c1
    iconcoords {272.38100251924203 115.46912922606006}
    labelcoords {272.38100251924203 143.46912922606006}
    interface-peer {eth0 n1}
    interface-peer {eth1 n3}
    services {zebra OSPFv2 OSPFv3 vtysh IPForward DefaultRoute}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	
	('defaultroute.sh',)
	80
	('sh defaultroute.sh',)
	
	
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.1.2
	ip route add default via 2001:1::1
	
	
	}
    }
    custom-image figs/adversary.gif
}

node n3 {
    type router
    model router
    network-config {
	hostname dr
	!
	interface eth2
	 ip address 10.0.8.1/24
	 ipv6 address 2001:8::1/64
	!
	interface eth1
	 ip address 10.0.20.1/24
	 ipv6 address 2001:20::1/64
	!
	interface eth0
	 ip address 10.0.1.2/24
	 ipv6 address 2001:1::2/64
	!
    }
    canvas c1
    iconcoords {452.3716106901144 116.32592156563604}
    labelcoords {452.3716106901144 144.32592156563624}
    interface-peer {eth0 n2}
    services {zebra OSPFv2 OSPFv3 vtysh IPForward DefaultRoute}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	
	('defaultroute.sh',)
	80
	('sh defaultroute.sh',)
	
	
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 10.0.1.1
	#ip route add default via 2001:1::1
	#ip route add default via 10.0.20.1
	#ip route add default via 2001:20::1
	ip route add default via 10.0.8.2
	ip route add default via 2001:8::2
	
	
	
	
	}
    }
    interface-peer {eth2 n8}
    interface-peer {eth1 n7}
    custom-image figs/dr.gif
}

node n7 {
    type router
    model host
    network-config {
	hostname dp
	!
	interface eth0
	 ip address 10.0.20.10/24
	 ipv6 address 2001:20::10/64
	!
    }
    canvas c1
    iconcoords {451.6099989647265 242.6148123783522}
    labelcoords {451.6099989647265 274.614812378352}
    interface-peer {eth0 n3}
    custom-image figs/dp.gif
}

node n9 {
    type rj45
    network-config {
	hostname eth1
	!
    }
    canvas c1
    iconcoords {736.8523624006225 34.91799256399554}
    labelcoords {736.8523624006225 62.9179925639952}
    interface-peer {0 n8}
}

node n8 {
    type router
    model router
    network-config {
	hostname internet
	!
	interface eth0
	!
	interface eth1
	 ip address 10.0.8.2/24
	 ipv6 address 2001:8::2/64
	!
    }
    canvas c1
    iconcoords {658.2948875687491 116.85305752720774}
    labelcoords {658.2948875687491 144.85305752720797}
    interface-peer {eth0 n9}
    services {zebra OSPFv2 OSPFv3 vtysh IPForward DefaultRoute DHCPClient Firewall}
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh# auto-generated by DHCPClient service (utility.py)
	/sbin/dhclient -d -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	#/sbin/dhclient -d -pf /var/run/dhclient-eth1.pid -lf /var/run/dhclient-eth1.lease eth1
	
	}
    }
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	
	('startdhcpclient.sh', )
	80
	('sh startdhcpclient.sh', )
	('killall dhclient', )
	('pidof dhclient', )
	
	}
    }
    custom-config {
	custom-config-id service:Firewall:firewall.sh
	custom-command firewall.sh
	config {
	#!/bin/sh
	# custom node firewall rules for service (security.py)
	# -------- CUSTOMIZATION REQUIRED --------
	#
	# Below are sample iptables firewall rules that you can uncomment and edit.
	# You can also use ip6tables rules for IPv6.
	#
	
	# Nat things going out eth0 to the Internet
	iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
	
	# start by flushing all firewall rules (so this script may be re-run)
	#iptables -F
	
	# allow traffic related to established connections
	#iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	
	# allow TCP packets from any source destined for 192.168.1.1
	#iptables -A INPUT -s 0/0 -i eth0 -d 192.168.1.1  -p TCP -j ACCEPT
	
	# allow OpenVPN server traffic from eth0
	#iptables -A INPUT -p udp --dport 1194 -j ACCEPT
	#iptables -A INPUT -i eth0 -j DROP
	#iptables -A OUTPUT -p udp --sport 1194 -j ACCEPT
	#iptables -A OUTPUT -o eth0 -j DROP
	
	# allow ICMP ping traffic
	#iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
	#iptables -A INPUT  -p icmp --icmp-type echo-reply   -j ACCEPT
	
	# allow SSH traffic
	#iptables -A -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
	
	# drop all other traffic coming in eth0
	#iptables -A INPUT -i eth0 -j DROP
	
	}
    }
    custom-config {
	custom-config-id service:Firewall
	custom-command Firewall
	config {
	
	('firewall.sh', )
	20
	('sh firewall.sh', )
	
	
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	
	('defaultroute.sh',)
	80
	('sh defaultroute.sh',)
	
	
	
	}
    }
    custom-config {
	custom-config-id service:custom
	custom-command custom
	config {
	
	
	50
	('/sbin/iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE', '/sbin/iptables -A FORWARD -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT', '/sbin/iptables -A FORWARD -i eth1 -o eth0 -j ACCEPT')
	
	
	Customize this service to do anything upon startup.
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.3.2
	
	
	}
    }
    interface-peer {eth1 n3}
}

node n4 {
    type rj45
    network-config {
	hostname eth3
	!
    }
    canvas c1
    iconcoords {86.0 238.0}
    labelcoords {86.0 266.0}
    interface-peer {0 n1}
    custom-image figs/win7.png
}

link l1 {
    nodes {n1 n2}
    bandwidth 0
}

link l2 {
    nodes {n2 n3}
    bandwidth 0
}

link l7 {
    nodes {n8 n9}
}

link l8 {
    nodes {n3 n8}
    bandwidth 0
}

link l3 {
    nodes {n7 n3}
    bandwidth 0
}

link l4 {
    nodes {n1 n4}
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses no
    ipv6_addresses no
    node_labels no
    link_labels yes
    ipsec_configs yes
    exec_errors yes
    show_api no
    background_images no
    annotations yes
    grid no
    traffic_start 0
}

